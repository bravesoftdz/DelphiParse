unit DelphiParse.Objects;

interface

uses DelphiParse, DelphiParse.Interfaces, System.JSON,
  System.Generics.Collections, DelphiParse.Consts;

type
  TParseObjects = class(TInterfacedObject, IParseObject)
  private
    FClassName: string;
    Obj: TJSonObject;
    QryParams: TDictionary<string, string>;
  public
    Parse: TDelphiParse;

    constructor Create(ClassName: string);
    destructor Destroy; override;
    procedure Add(Key, Value: Variant); overload;

    function SaveInBackGround(): string;
    function GetAllInBackGround(): string;
    function DeleteInBackGround(ObjectId: string): string;
  end;

implementation

uses
  System.SysUtils;

{ TDelphiParseObjects }

constructor TParseObjects.Create(ClassName: string);
begin
  inherited Create;
  FClassName := ClassName;
  Obj := TJSONObject.Create;
  Parse := TDelphiParse.Create;
  QryParams := TDictionary<string, string>.Create();
end;

destructor TParseObjects.Destroy;
begin
  Parse.Free;
  Obj.Free;
  QryParams.Free;
  inherited;
end;

function TParseObjects.GetAllInBackGround: string;
begin
  Result := Parse.Get(['classes', FClassName]).ResponseAsString();
end;

procedure TParseObjects.Add(Key, Value: Variant);
begin
  Obj.AddPair(Key, Value);
end;

function TParseObjects.SaveInBackGround: string;
begin
  if (Obj.Count = 0) then
    raise Exception.Create('Objeto JSON não preenchido!');
  Result := Parse.Post(['classes', FClassName], Obj).ResponseAsString();
end;

function TParseObjects.DeleteInBackGround(ObjectId: string): string;
begin
  if (ObjectId = '') then
    raise Exception.Create('ObjectId não informado!');
  Result := Parse.Post(['classes', FClassName, ObjectId]).ResponseAsString();
end;

end.
